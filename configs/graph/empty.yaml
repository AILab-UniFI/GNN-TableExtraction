GENERAL:
    arg_name: 16-04-2022
    converted: True
    num_papers: null
    from_checkpoint: null

##################
## GRAPHBUILDER ##
##################

PREPROCESS:
    # max pixels and edge can be
    max_dist: 500
    # number of neighbors if knn is used
    k: 5
    # define how far a node can be from other classes. 
    # The lower the number, the more the nodes will be removed.
    range_island: 4
    # random seed for reproducibility
    seed: 42
    # define whether to pad with 0 or not scale input dimension
    padding: False
    #! choose a graph (edges) between -> 'knn' / 'visibility'
    mode: null
    #! choose features to load in graph nodes -> 'bbox' / 'repr' / 'spacy' / 'scibert'
    features: null
        # - BBOX
        # - REPR
        # - SPACY
        # - SCIBERT
    #! choose edge features to load in graph edges -> 'distances'
    edge_features: null
    #! make edges bidirectional
    bidirectional: null



################
##  FEATURES  ##
################
FEATURES:

    BBOX:
        specifics:
            is_cuda: False
            return_tensor: False
        

        input: null

    REPR:
        # features representation vary on
        specifics:
            # others params
            use_words: False
            top_k: 2000
            is_cuda: False
            return_tensor: True
        

        input: 
            # file params
            run_name: '2022-03-08 15:43:29'
            epoch_no: 10
            centroids_no: 47
            component_no: 3
            alpha_no: 1.0
            

    SPACY:
        specifics:
            model_path: 'en_core_web_lg'
            is_cuda: False
            return_tensor: False
        

        # one could apply this method both on 
        # singular text word or sentence
        input:
            # type can be ['singular', 'lines', 'blocks']
            type: 'singular'
            # if singular, then reference=null
            # if lines or block, then 
            # reference=path/to/lines-or-blocks-file or lines-or-blocks-file
            reference: null
        

    SCIBERT:
        specifics:
            per_chunk: 6000
            model_path: 'allenai/scibert_scivocab_uncased'
            pooling: 'mean' # 'max'
            is_cuda: False
            return_tensor: True
        

        # one could apply this method both on 
        # singular text word or sentence
        input:
            # type can be ['singular', 'lines', 'blocks']
            type: 'singular'
            # if singular, then reference=null
            # if lines or block, then 
            # reference=path/to/lines-or-blocks-file or lines-or-blocks-file
            reference: null

################
## DATALOADER ##
################

DLTRAIN:
    # use only the pages with a table within
    only_tables: True
    # remove from graphs those nodes too far from other different classes
    remove_islands: True
    # train split, range 0 -> 1
    rate: 0.95

DLTEST:
    # use only the pages with a table within
    only_tables: False
    # remove from graphs those nodes too far from other different classes
    remove_islands: False

####################
## TRAINING MODEL ##
####################

TRAINING:
    # number of training graphs
    num_graphs: null
    # adding nodes self loops
    self_loop: False
    # gpu to use
    gpu: 0
    # how many features to drop 0 -> 100 %
    dropout: 0
    # number of epochs
    n_epochs: 2000
    # optimizer settings
    lr: 0.01
    weight_decay: 0.0005 # 5e-4
    # k-Fold cross validation
    n_splits: 10
    #* add class weights for data imbalance
    class_weights: null
    class_weights_method: null # 'auto' calculates the auto
    # choose from ['all_scibert', 'all_spacy', 'only_scibert', 'only_spacy', 'only_repr', 'only_bbox']
    # mode: all_scibert
    # number of pages at runtime
    batch_size: null
    # early stopper max epoch before quit training
    es_patience: 50
    # informations about the model mode
    #! mode for calculating hidden_layed_dimensions ['fixed', 'scaled', 'half', 'padding']
    mode_params: null
    #! number of layers in the network
    n_layers: null
    #! the calculated hidden layer dimension
    h_layer_dim: null



####################
##  LABELS PARAMS ##
####################
LABELS:
    to_remove:
        # - OTHER       # = 0
        # - TEXT        # = 1
        # - TITLE       # = 2
        # - LIST        # = 3
        - 4 # TABLE       # = 4 #! NO NODES
        # - FIGURE      # = 5
        # - CAPTION     # = 6
        # - TABLE_COLH  # = 7
        # - TABLE_SP    # = 8
        - 9 #TABLE_GCELL # = 9 #! NO NODES
        # - TABLE_TCELL # = 10
        - 11 #TABLE_COL   # = 11 #! NO NODES
        - 12 #TABLE_ROW   # = 12 #! NO NODES

####################
##  MODES PARAMS  ##
####################

MODES:
    # if it's fixed, no additional parameters are required
    fixed:
        #! number of parameter to have in each hidden layer
        h_layer_dim: null

    scaled:
        # number of parameters of the network
        # if None -> h_layer_dim = in_feats
        #! if value -> n_layer is adapted as consequences
        params_no: null

    # if it's half, no additional parameters are required as
    # h_layer_dim is just in_feats/2
    half: null

    # if it's padding, no additional parameters are required
    # h_layer_dim is just in_feats/2
    padding: null

